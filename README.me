# Data Structures and Algorithms (DSA) Practice Repository

Welcome to the **DSA Practice Repository**! This repository contains a curated collection of coding questions categorized by different data structure and algorithm (DSA) topics. Each category includes top problems that help you practice and master specific concepts.

## Table of Contents

1. [Basic Operations](#1-basic-operations)
   - [Traversing](#traversing)
   - [Searching](#searching)
   - [Insertion/Deletion](#insertiondeletion)
2. [Sorting](#2-sorting)
   - [Simple Sorting](#simple-sorting)
   - [Advanced Sorting](#advanced-sorting)
3. [Two-Pointer Technique](#3-two-pointer-technique)
   - [Pairing Elements](#pairing-elements)
   - [Partitioning](#partitioning)
4. [Sliding Window](#4-sliding-window)
   - [Fixed Window](#fixed-window)
   - [Dynamic Window](#dynamic-window)
5. [Divide and Conquer](#5-divide-and-conquer)
   - [Recursion-Based](#recursion-based)
6. [Greedy Algorithms](#6-greedy-algorithms)
   - [Optimization Problems](#optimization-problems)
7. [Hashing](#7-hashing)
   - [Frequency Counting](#frequency-counting)
   - [Duplicate Detection](#duplicate-detection)
8. [Dynamic Programming](#8-dynamic-programming)
   - [Subarray/Subsequence Problems](#subarraysubsequence-problems)
   - [Kadane’s Algorithm](#kadanes-algorithm)
9. [Matrix-Based Arrays](#9-matrix-based-arrays)
   - [2D Array Traversal](#2d-array-traversal)
   - [Searching in 2D Arrays](#searching-in-2d-arrays)
10. [Miscellaneous](#10-miscellaneous)
    - [Backtracking](#backtracking)
    - [Bit Manipulation](#bit-manipulation)
11. [Combined Concepts](#11-combined-concepts)
    - [Arrays + Hashing](#arrays--hashing)
    - [Arrays + Stacks](#arrays--stacks)
    - [Arrays + Queues](#arrays--queues)
    - [Arrays + Linked Lists](#arrays--linked-lists)
    - [Arrays + Trees](#arrays--trees)
    - [Arrays + Graphs](#arrays--graphs)
    - [Arrays + Dynamic Programming](#arrays--dynamic-programming)
    - [Arrays + Tries](#arrays--tries)
    - [Arrays + Bit Manipulation](#arrays--bit-manipulation)
    - [Arrays + Backtracking](#arrays--backtracking)

---

## 1. Basic Operations

### Traversing
- **Sum of Elements:** Find the sum of all elements in an array.
- **Count Occurrences:** Count occurrences of a specific element in an array.
- **Max/Min Elements:** Find the maximum and minimum elements in an array.
- **Reverse Array:** Reverse an array in place.
- **Average of Elements:** Find the average of all elements in an array.

### Searching
- **Element Index:** Find the index of a given element in an array.
- **Binary Search:** Search for an element in a sorted array using Binary Search.
- **First/Last Position:** Find the first and last positions of an element in a sorted array.
- **Array Rotation Count:** Find the number of times a sorted array is rotated.
- **Search in Rotated Array:** Search an element in a rotated sorted array.

### Insertion/Deletion
- **Insert Element:** Insert an element at a specific position.
- **Delete Element:** Delete an element from a specific position.
- **Remove Occurrences:** Remove all occurrences of a given element in an array.
- **Merge Arrays:** Merge two sorted arrays into one sorted array.
- **Rotate Array:** Rotate an array to the right by `k` steps.

## 2. Sorting

### Simple Sorting
- **Bubble Sort:** Implement Bubble Sort.
- **Selection Sort:** Implement Selection Sort.
- **Insertion Sort:** Implement Insertion Sort.
- **String Sorting:** Sort an array of strings.
- **Dutch National Flag:** Sort an array of 0s, 1s, and 2s.

### Advanced Sorting
- **Merge Sort:** Implement Merge Sort.
- **Quick Sort:** Implement Quick Sort.
- **Kth Smallest/Largest:** Find the `k`th smallest/largest element in an array.
- **Frequency Sorting:** Sort an array based on the frequency of elements.
- **Custom Comparator:** Sort an array of integers using a custom comparator.

## 3. Two-Pointer Technique

### Pairing Elements
- **Two Sum:** Find two numbers in an array that add up to a given sum.
- **Three Sum:** Find all unique triplets in an array that sum up to zero.
- **Remove Duplicates:** Remove duplicates from a sorted array.
- **Closest Pair:** Find the closest pair to a given target in two sorted arrays.
- **Merge Without Extra Space:** Merge two sorted arrays without using extra space.

### Partitioning
- **Move Zeroes:** Move all zeroes to the end of the array.
- **Sort 0s and 1s:** Sort an array of 0s and 1s.
- **Partition Around Pivot:** Partition an array around a pivot.
- **Rearrange Negatives:** Rearrange an array so that all negative numbers appear before positive numbers.
- **Segregate Even/Odd:** Segregate even and odd numbers in an array.

## 4. Sliding Window

### Fixed Window
- **Max Sum Subarray:** Find the maximum sum of `k` consecutive elements.
- **Min Sum Subarray:** Find the minimum sum of `k` consecutive elements.
- **Subarrays with Sum > X:** Find all subarrays of a fixed size with a sum greater than `X`.
- **Max Vowels:** Find the maximum number of vowels in a substring of length `k`.
- **Subarrays with K Distinct:** Count the number of subarrays with exactly `k` distinct elements.

### Dynamic Window
- **Smallest Subarray:** Find the smallest subarray with a sum greater than a given value.
- **Longest Substring Without Repeating:** Longest substring without repeating characters.
- **Longest Subarray with Sum K:** Longest subarray with a sum equal to `k`.
- **Longest Substring with Two Distinct:** Find the longest substring with at most two distinct characters.
- **Max Length Subarray with Sum ≤ K:** Maximum length of a subarray with sum less than or equal to `k`.

## 5. Divide and Conquer

### Recursion-Based
- **Max Element with Divide and Conquer:** Find the maximum element in an array using a divide-and-conquer approach.
- **Merge Step:** Implement the merge step in Merge Sort.
- **Majority Element:** Find the majority element in an array.
- **Count Inversions:** Count the number of inversions in an array.
- **Closest Pair of Points:** Find the closest pair of points in a 2D plane.

## 6. Greedy Algorithms

### Optimization Problems
- **Minimum Platforms:** Find the minimum number of platforms required for a train station.
- **Max Sum Non-Adjacent:** Find the maximum sum of non-adjacent elements.
- **Min Jumps:** Find the minimum number of jumps to reach the end of the array.
- **Largest Number from Digits:** Find the largest number possible from the given digits.
- **Minimum Coins for Change:** Minimum number of coins/notes required to make a change of `n`.

## 7. Hashing

### Frequency Counting
- **Most Frequent Element:** Find the most frequent element in an array.
- **Group by Frequency:** Group elements of the array with the same frequency.
- **First Non-Repeating Element:** Find the first non-repeating element in an array.
- **Elements with More than n/k Frequency:** Find elements that appear more than `n/k` times in an array.
- **Count Distinct in Window:** Count distinct elements in every window of size `k`.

### Duplicate Detection
- **Check for Duplicates:** Check if an array contains duplicate elements.
- **First Repeating Element:** Find the first repeating element in an array.
- **Pairs with Sum:** Find all pairs in an array that sum up to a given value.
- **Missing Number:** Find the missing number in an array of consecutive numbers.
- **Check Array Equality:** Check if two arrays are equal or not.

## 8. Dynamic Programming

### Subarray/Subsequence Problems
- **Longest Increasing Subsequence:** Find the longest increasing subsequence.
- **Max Sum Subarray (Kadane’s Algorithm):** Find the maximum sum subarray.
- **Longest Common Subsequence:** Find the longest common subsequence.
- **Ways to Reach the End:** Find the number of ways to reach the end of an array.
- **Partition with Equal Sum:** Partition an array into two subsets with equal sum.

### Kadane’s Algorithm
- **Max Sum Subarray:** Maximum sum subarray problem.
- **Max Product Subarray:** Find the maximum product subarray.
- **Max Sum Circular Subarray:** Find the maximum sum circular subarray.
- **Max Sum Non-Adjacent:** Find the largest sum of non-adjacent elements.
- **Max Sum Increasing Subsequence:** Maximum sum of increasing subsequence.

Certainly! Continuing from where we left off:

---

### 9. **Matrix-Based Arrays**

   - **2D Array Traversal:**
     1. Rotate a matrix by 90 degrees.
     2. Find the largest sum rectangle in a 2D matrix.
     3. Search for an element in a row-wise and column-wise sorted matrix.
     4. Transpose a matrix.
     5. Print a matrix in spiral order.

   - **Searching in 2D Arrays:**
     1. Find a specific element in a row-wise and column-wise sorted matrix.
     2. Find the k-th smallest element in a sorted matrix.
     3. Find the median of a matrix.
     4. Count the number of islands in a binary matrix.
     5. Find the largest rectangular sub-matrix with all 1s.

---

### 10. **Miscellaneous**

   - **Backtracking:**
     1. Generate all subsets of an array.
     2. Solve the N-Queens problem.
     3. Generate all permutations of an array.
     4. Solve the Sudoku problem.
     5. Find all unique combinations that sum up to a target.

   - **Bit Manipulation:**
     1. Find the single non-repeating element in an array where every other element repeats twice.
     2. Find two non-repeating elements in an array where every other element repeats twice.
     3. Find the number of set bits in an integer.
     4. Generate all possible subsets of an array using bit manipulation.
     5. Check if a number is a power of two.

---

## Arrays Combined with Other Data Structures

When array questions are combined with other data structures, they can be classified based on the data structure used alongside the array. Here’s a classification:

### 1. **Arrays + Hashing**

   - **Problems Involving Frequency Counting:**
     - Find the most frequent element in an array.
     - Count distinct elements in an array.
     - Find elements that appear more than `n/k` times in an array.
     
   - **Problems Involving Hash Maps:**
     - Two-sum problem: Find two numbers that add up to a given sum.
     - Check if two arrays are equal or not.
     - Find the longest subarray with a given sum.

### 2. **Arrays + Stacks**

   - **Monotonic Stack Problems:**
     - Find the next greater element for each element in an array.
     - Find the largest rectangular area in a histogram.
     - Find the maximum of the minimums for every window size.

   - **Balancing Problems:**
     - Check for balanced parentheses using stacks and arrays.
     - Evaluate a postfix expression using a stack.
     - Simplify a directory path using stack and array.

### 3. **Arrays + Queues**

   - **Sliding Window Problems:**
     - Find the maximum element in each sliding window of size `k`.
     - First negative integer in every window of size `k`.
     - Find the first non-repeating character in a stream of characters.

   - **Circular Queue Problems:**
     - Implement a circular queue using arrays.
     - Design a data structure that supports the following operations: `insert`, `delete`, and `getRandom`.
     - Implement the Deque data structure using arrays.

### 4. **Arrays + Linked Lists**

   - **Merging Problems:**
     - Merge two sorted linked lists into a sorted array.
     - Convert a sorted array to a balanced binary search tree (BST).
     - Flatten a linked list that has a bottom pointer to another linked list.

   - **Array Representation of Linked Lists:**
     - Implement a linked list using arrays (array of pointers).
     - Convert a linked list to an array and vice versa.
     - Implement a LRU (Least Recently Used) cache using a linked list and array.

### 5. **Arrays + Trees**

   - **Traversal Problems:**
     - Print all root-to-leaf paths in a binary tree stored in an array.
     - Find the maximum path sum in a binary tree represented as an array.
     - Convert a binary tree (stored as an array) to its mirror tree.

   - **Heap Problems:**
     - Build a max-heap/min-heap from an array.
     - Find the k-th largest element in a stream using a binary heap.
     - Merge k sorted arrays using a min-heap.

### 6. **Arrays + Graphs**

   - **Graph Representation:**
     - Represent a graph using an adjacency matrix.
     - Convert an adjacency list to an adjacency matrix and vice versa.
     - Find the shortest path in a graph using an array-based priority queue.

   - **Traversal Problems:**
     - Find all nodes at distance `k` from a given node in a graph represented by an array.
     - Detect a cycle in a directed graph using DFS and an auxiliary array.
     - Implement Dijkstra’s algorithm using arrays and priority queues.

### 7. **Arrays + Dynamic Programming**

   - **Subarray/Subsequence Problems:**
     - Find the longest increasing subsequence using dynamic programming and arrays.
     - Find the maximum sum subarray using Kadane’s algorithm (DP approach).
     - Count the number of ways to partition an array into two subsets with equal sum.

   - **Matrix DP Problems:**
     - Find the longest common subsequence in two arrays.
     - Solve the coin change problem using dynamic programming with arrays.
     - Find the number of distinct subsequences of a given sequence.

### 8. **Arrays + Tries**

   - **String Matching Problems:**
     - Implement a Trie and use it for prefix-based search in an array of strings.
     - Find the longest common prefix in an array of strings.
     - Count the number of words with a given prefix in an array using a Trie.

   - **Autocomplete Problems:**
     - Implement an autocomplete system using a Trie and array.
     - Find all words in an array that start with a given prefix using a Trie.
     - Construct a Trie from an array of words and search for a given word.

### 9. **Arrays + Bit Manipulation**

   - **XOR Problems:**
     - Find the single non-repeating element in an array where every other element repeats twice.
     - Find two non-repeating elements in an array where every other element repeats twice.
     - Find the missing number in an array of `n` elements.

   - **Subset Problems:**
     - Generate all subsets of an array using bit manipulation.
     - Find the subset of an array that has the maximum XOR value.
     - Count the number of subsets whose XOR is a given value.

### 10. **Arrays + Backtracking**

   - **Combination Problems:**
     - Generate all possible permutations of an array.
     - Find all unique subsets of an array that sum up to a target.
     - Solve the N-Queens problem on a board represented by an array.

   - **Sudoku and Puzzle Solving:**
     - Solve a Sudoku puzzle using backtracking with arrays.
     - Generate all valid IP addresses from a given string using backtracking and arrays.
     - Find all possible palindrome partitions of a string using backtracking and arrays.

---
